on:
  workflow_call:
    inputs:
      rev-deps-key:
        required: true
        type: string
      patched-channel-key:
        required: true
        type: string
      rebuilt-channel-key:
        required: true
        type: string
      seed-environment-key:
        required: true
        type: string
      matrix-key:
        required: true
        type: string
      matrix-index:
        required: true
        type: number
      sibling-ref:
        required: true
        type: string
      is-rebuild:
        required: true
        type: string
      is-language:
        required: true
        type: string

env:
  matrix_path: './matrix'
  rebuilt_channel_path: './rebuilt-channel'
  patched_channel_path: './patched-channel'
  rev_deps_path: './rev-deps'
  seed_environment_path: './seed-env'
  plugin_path: './plugin'
  version_key: '[Version Files] Rebuilt version info'
  version_path: './version-info'
  repodata_patches_key: '[Repodata Patches] patch_instructions.json'
  repodata_patches_path: './repodata-patches'

jobs:
  configure_matrix:
    name: 'Set up build matrix'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:

      - uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.matrix-key }}
          path: '${{ env.matrix_path }}'

      - id: set-matrix
        run: |
          echo "matrix=$(cat ${{ env.matrix_path }}/rebuild_matrix.json)" >> $GITHUB_OUTPUT


  run_matrix:
    name: '${{ matrix.package }} (${{ matrix.os }})'
    needs: configure_matrix
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJSON(needs.configure_matrix.outputs.matrix)[inputs.matrix-index] }}
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:

      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - shell: bash
        run: pip install pyyaml

      - uses: actions/download-artifact@v3
        name: 'Fetch base channel with patches'
        with:
          name: ${{ inputs.patched-channel-key }}
          path: ${{ env.patched_channel_path }}

      - uses: actions/download-artifact@v3
        name: 'Fetch rebuilt channel'
        with:
          name: ${{ inputs.rebuilt-channel-key }}
          path: ${{ env.rebuilt_channel_path }}

      - uses: actions/download-artifact@v3
        name: 'Fetch seed environment.yml'
        with:
          name: ${{ inputs.seed-environment-key }}
          path: ${{ env.seed_environment_path }}

      - name: Try to retrieve branch name
        if: ${{ inputs.is-language == 'true' }}
        uses: octokit/request-action@v2.x
        id: get-branch
        with:
          route: GET /repos/${{ matrix.package }}/branches/${{ inputs.sibling-ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Determine which branch to checkout
        if: ${{ inputs.is-language == 'true' }}
        id: sibling-ref
        run: |
          if [[ '${{ steps.get-branch.outputs.status }}' = '200' ]]; then
            sibling_ref="${{ inputs.sibling-ref }}"
          else
            sibling_ref=""
          fi
          echo "sibling-ref=$sibling_ref" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
        if: ${{ inputs.is-language == 'true' }}
        name: 'Checkout ${{ matrix.package }} repository'
        with:
          repository: ${{ matrix.package }}
          ref: ${{ steps.sibling-ref.outputs.sibling-ref }}
          path: ${{ env.plugin_path }}
          fetch-depth: 0

      - uses: actions/checkout@v3
        if: ${{ inputs.is-language != 'true' }}
        name: 'Checkout ${{ matrix.package }} repository'
        with:
          repository: ${{ matrix.package }}
          ref: ${{ inputs.sibling-ref }}
          path: ${{ env.plugin_path }}
          fetch-depth: 0

      - uses: qiime2/action-library-packaging/build-package@beta
        name: 'Determine package data for ${{ matrix.package }}'
        id: get-package-data
        with:
          conda-activate: ''
          recipe-path: ${{ env.plugin_path }}/ci/recipe/
          conda-build-config: ${{ steps.make-cbc.outputs.conda-build-config }}
          channels: ${{ steps.make-cbc.outputs.channels }}
          output-channel: ${{ env.rebuilt_channel_path }}
          dry-run: true

      - uses: actions/cache/restore@v3
        name: 'Try to fetch an existing build'
        id: fetch-build
        with:
          key: "[Conda Package] ${{ steps.get-package-data.outputs.package-name }}=${{ steps.get-package-data.outputs.package-version }} (${{ matrix.os }}) (${{ hashFiles(format('{0}/seed-environment-conda.yml', env.seed_environment_path)) }})"
          path: ${{ env.rebuilt_channel_path }}/*/${{ steps.get-package-data.outputs.package-name}}-${{ steps.get-package-data.outputs.package-version}}-*

      - uses: qiime2/action-library-packaging/environment@beta
        if: ${{ !steps.fetch-build.outputs.cache-hit }}
        name: 'Set up build environment'
        id: setup-conda

      - uses: qiime2/action-library-packaging/make-conda-config@beta
        if: ${{ !steps.fetch-build.outputs.cache-hit }}
        name: 'Create conda build config'
        id: make-cbc
        with:
          conda-activate: ${{ steps.setup-conda.outputs.conda-activate }}
          seed-environment: '${{ env.seed_environment_path }}/seed-environment-conda.yml'
          conda-build-config: 'conda_build_config.yml'
          channels: '["${{ env.rebuilt_channel_path }}", "${{ env.patched_channel_path }}"]'
          skip-first-channel: true

      - uses: qiime2/action-library-packaging/build-package@beta
        if: ${{ !steps.fetch-build.outputs.cache-hit }}
        name: 'Build ${{ matrix.package }}'
        id: build-package
        with:
          conda-activate: ${{ steps.setup-conda.outputs.conda-activate }}
          recipe-path: ${{ env.plugin_path }}/ci/recipe/
          conda-build-config: ${{ steps.make-cbc.outputs.conda-build-config }}
          channels: ${{ steps.make-cbc.outputs.channels }}
          output-channel: ${{ env.rebuilt_channel_path }}

      - uses: actions/cache/save@v3
        if: ${{ !steps.fetch-build.outputs.cache-hit }}
        name: 'Cache build of ${{ matrix.package }}'
        id: cache-build
        with:
          key: ${{ steps.fetch-build.outputs.cache-primary-key }}
          path: ${{ env.rebuilt_channel_path }}/*/${{ steps.get-package-data.outputs.package-name}}-${{ steps.get-package-data.outputs.package-version}}-*

      - uses: actions/upload-artifact@v3
        name: 'Upload updated build to rebuilt channel'
        with:
          name: ${{ inputs.rebuilt-channel-key }}
          path: ${{ env.rebuilt_channel_path }}/*/${{ steps.get-package-data.outputs.package-name}}-${{ steps.get-package-data.outputs.package-version}}-*

      - id: setup-version-info
        name: 'Capture info about package'
        shell: bash
        run: |
          mkdir -p ${{ env.version_path }}
          echo '${{ steps.get-package-data.outputs.package-name }}=${{ steps.get-package-data.outputs.package-version }}' > '${{ env.version_path }}/${{ steps.get-package-data.outputs.package-name }}.txt'

      - uses: actions/upload-artifact@v3
        name: 'Upload info about package'
        with:
          name: ${{ env.version_key }}
          path: ${{ env.version_path }}


  finalize:
    name: 'Finalize generation'
    needs: [run_matrix]
    runs-on: ubuntu-latest
    steps:

      - uses: actions/download-artifact@v3
        name: 'Collate rebuilt channel'
        with:
          name: ${{ inputs.rebuilt-channel-key }}
          path: ${{ env.rebuilt_channel_path }}

      - name: set up python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: install pyyaml & packaging
        shell: bash
        run: pip install pyyaml packaging

      - name: install conda-build
        run: conda install -q conda-build

      - name: 'Reindex rebuilt channel'
        shell: bash
        run: conda index ${{ env.rebuilt_channel_path }}

      - uses: actions/upload-artifact@v3
        name: 'Upload final rebuilt channel'
        with:
          name: ${{ inputs.rebuilt-channel-key }}
          path: |
            ${{ env.rebuilt_channel_path }}/**/*repodata*
            ${{ env.rebuilt_channel_path }}/**/*index*
            ${{ env.rebuilt_channel_path }}/*channeldata*
            !${{ env.rebuilt_channel_path }}/*/.cache/*

      - uses: actions/download-artifact@v3
        name: 'Fetch updated versions'
        with:
          name: ${{ env.version_key }}
          path: ${{ env.version_path }}

      - name: 'Collated updated versions'
        shell: bash
        run: cat ${{ env.version_path }}/*.txt > version_updates.txt

      - uses: actions/download-artifact@v3
        name: 'Fetch seed environment.yml'
        with:
          name: ${{ inputs.seed-environment-key }}
          path: ${{ env.seed_environment_path }}

      - uses: qiime2/action-library-packaging/patch-env@beta
        name: 'Update seed environment file with new versions'
        with:
          environment-file: ${{ env.seed_environment_path }}/seed-environment-conda.yml
          versions-file: version_updates.txt

      - uses: actions/upload-artifact@v3
        name: 'Update seed environment.yml'
        with:
          name: ${{ inputs.seed-environment-key }}
          path: ${{ env.seed_environment_path }}

      - uses: actions/download-artifact@v3
        if: ${{ inputs.is-rebuild != 'true' }}
        name: 'Fetch base channel with patches'
        with:
          name: ${{ inputs.patched-channel-key }}
          path: ${{ env.patched_channel_path }}

      - uses: actions/download-artifact@v3
        if: ${{ inputs.is-rebuild != 'true' }}
        name: 'Fetch rebuilt packages and their reverse dependencies'
        with:
          name: ${{ inputs.rev-deps-key }}
          path: ${{ env.rev_deps_path }}

      - name: 'Patch base channel'
        if: ${{ inputs.is-rebuild != 'true' }}
        uses: qiime2/action-library-packaging/patch-repodata@beta
        with:
          channel: ${{ env.patched_channel_path }}
          rev-deps: ${{ env.rev_deps_path }}/rev_deps.json
          versions-file: version_updates.txt

      - name: copy repodata patches
        if: ${{ inputs.is-rebuild != 'true' }}
        run: |
          mkdir -p ${{ env.repodata_patches_path }}/linux-64
          mkdir -p ${{ env.repodata_patches_path }}/osx-64
          mkdir -p ${{ env.repodata_patches_path }}/noarch

          cp ${{ env.patched_channel_path }}/linux-64/patch_instructions.json \
             ${{ env.repodata_patches_path }}/linux-64/patch_instructions.json

          cp ${{ env.patched_channel_path }}/osx-64/patch_instructions.json \
             ${{ env.repodata_patches_path }}/osx-64/patch_instructions.json

          cp ${{ env.patched_channel_path }}/noarch/patch_instructions.json \
             ${{ env.repodata_patches_path }}/noarch/patch_instructions.json

      - name: store repodata patches
        if: ${{ inputs.is-rebuild != 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.repodata_patches_key }}
          path: ${{ env.repodata_patches_path }}

      - uses: actions/upload-artifact@v3
        if: ${{ inputs.is-rebuild != 'true' }}
        name: 'Upload base channel with patches'
        with:
          name: ${{ inputs.patched-channel-key }}
          path: ${{ env.patched_channel_path }}
