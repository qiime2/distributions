on:
  workflow_call:
    inputs:
      seed-environment-key:
        required: true
        type: string
      solved-environment-key:
        required: true
        type: string
      rebuilt-channel-key:
        required: true
        type: string
      patched-channel-key:
        required: true
        type: string
      distro-name:
        required: true
        type: string
    outputs:
      distro-version:
        value: ${{ jobs.setup-version.outputs.version }}

env:
  patched_channel_path: './patched-channel'
  rebuilt_channel_path: './rebuilt-channel'
  seed_environment_path: './seed-env'
  environment_prefix: './test-env/'

jobs:
  setup-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.create-version.outputs.version }}
    steps:
      - id: create-version
        shell: bash
        run: |
          echo version=$(
            python -c "import datetime; print(datetime.datetime.utcnow().strftime('%Y.%m.%d.%H.%M.%S'))"
          ) >> $GITHUB_OUTPUT

  build-metapackage:
    needs: [setup-version]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Maximize build space for linux
        shell: bash
        if: ${{ runner.os == 'Linux' }}
        run: |
          echo "Removing unwanted software... "
          
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          
          sudo apt-get remove aria2 ansible azure-cli shellcheck rpm xorriso zsync \
          clang-6.0 lldb-6.0 lld-6.0 clang-format-6.0 clang-8 lldb-8 lld-8 clang-format-8 \
          clang-9 lldb-9 lld-9 clangd-9 clang-format-9 dotnet-sdk-3.0 dotnet-sdk-3.1=3.1.101-1 \
          esl-erlang firefox g++-8 g++-9 gfortran-8 gfortran-9 google-chrome-stable \
          google-cloud-sdk ghc-8.0.2 ghc-8.2.2 ghc-8.4.4 ghc-8.6.2 ghc-8.6.3 ghc-8.6.4 \
          ghc-8.6.5 ghc-8.8.1 ghc-8.8.2 ghc-8.8.3 ghc-8.10.1 cabal-install-2.0 cabal-install-2.2 \
          cabal-install-2.4 cabal-install-3.0 cabal-install-3.2 heroku imagemagick \
          libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
          mercurial apt-transport-https mono-complete mysql-client libmysqlclient-dev \
          mysql-server mssql-tools unixodbc-dev yarn bazel chrpath libssl-dev libxft-dev \
          libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
          snmp pollinate libpq-dev postgresql-client powershell ruby-full \
          sphinxsearch subversion -yq
          
          sudo apt clean
          
          sudo swapoff -a
          sudo rm -f /swapfile
          
          sudo docker rmi $(sudo docker image ls -aq)
          sudo docker image prune --all --force
          
          echo "... done"

      - name: fetch seed env
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.seed-environment-key }}
          path: ${{ env.seed_environment_path }}

      - uses: actions/download-artifact@v3
        name: 'Fetch base channel with patches'
        with:
          name: ${{ inputs.patched-channel-key }}
          path: ${{ env.patched_channel_path }}

      - name: fetch rebuilt channel
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.rebuilt-channel-key }}
          path: ${{ env.rebuilt_channel_path }}

      - uses: qiime2/action-library-packaging/environment@beta
        id: build-env
        name: "Set up build env"

      - uses: qiime2/action-library-packaging/build-metapackage@beta
        name: "Build metapackage"
        id: build-meta
        with:
          conda-activate: ${{ steps.build-env.outputs.conda-activate }}
          channels: '["${{ env.rebuilt_channel_path }}", "${{ env.patched_channel_path }}"]'
          metapackage-name: ${{ inputs.distro-name }}
          metapackage-version: ${{ needs.setup-version.outputs.version }}
          seed-environment: '${{ env.seed_environment_path }}/seed-environment-conda.yml'
          output-channel: ${{ env.rebuilt_channel_path }}

      - name: Install metapackage, create env file, and cache
        id: cache-env
        uses: qiime2/action-library-packaging/create-env@beta
        with:
          conda-prefix: ${{ env.environment_prefix }}
          environment-file: ${{ inputs.distro-name }}-${{ matrix.os }}-conda.yml
          channels: ${{ steps.build-meta.outputs.channels }}
          package-name: ${{ inputs.distro-name }}
          package-version: ${{ needs.setup-version.outputs.version }}

      - name: upload rebuilt channel with metapackage
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.rebuilt-channel-key }}
          path: ${{ env.rebuilt_channel_path }}

      - name: upload environment file
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.solved-environment-key }}
          path: ${{ steps.cache-env.outputs.environment-file }}
